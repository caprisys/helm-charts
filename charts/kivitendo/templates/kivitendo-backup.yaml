{{- if .Values.backupJob.enable }}
###########################################################
#                        CronJob
###########################################################
---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: {{ include "kivitendo.fullname" . }}-backup
  labels:
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/name: {{ include "kivitendo.fullname" . }}-backup
spec:
  schedule: {{ .Values.backupJob.schedule | quote }}
  concurrencyPolicy: Forbid
  jobTemplate:
    metadata:
      labels:
        app.kubernetes.io/instance: {{ .Release.Name }}
        app.kubernetes.io/name: {{ include "kivitendo.fullname" . }}-backup
    spec:
      ttlSecondsAfterFinished: 172800
      template:
        metadata:
          labels:
            app.kubernetes.io/instance: {{ .Release.Name }}
            app.kubernetes.io/name: {{ include "kivitendo.fullname" . }}-backup
        spec:
          restartPolicy: Never
          securityContext:
            runAsNonRoot: true
          initContainers:
            - name: wait-for-postgres
              image: {{ include "kivitendo.image" ( dict "imageRoot" .Values.backupJob.image "global" $) }}
              imagePullPolicy: {{ .Values.backupJob.image.pullPolicy }}
              command:
                - timeout
                - "600"
                - bash
                - -c
                - "until psql -Atc 'select 1' > /dev/null 2>&1; do echo -n .; sleep 1; done"
              env:
                - name: PGHOST
                  value: "{{ .Values.database.postgresHost }}"
                - name: PGUSER
                  value: "{{ .Values.backupJob.postgresUser }}"
                - name: PGPASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: {{ .Values.backupJob.postgresSecret.name }}
                      key: {{ .Values.backupJob.postgresSecret.key }}
              securityContext:
                runAsNonRoot: true
                runAsUser: 1001
                allowPrivilegeEscalation: false
                capabilities:
                  drop:
                  - ALL
                readOnlyRootFilesystem: true
                seccompProfile:
                  type: RuntimeDefault
          containers:
            - name: s3-backup
              image: {{ include "kivitendo.image" ( dict "imageRoot" .Values.backupJob.image "global" $) }}
              imagePullPolicy: {{ .Values.backupJob.image.pullPolicy }}
              securityContext:
                runAsNonRoot: true
                runAsUser: 1001
                allowPrivilegeEscalation: false
                capabilities:
                  drop:
                  - ALL
                readOnlyRootFilesystem: true
                seccompProfile:
                  type: RuntimeDefault
              command: ["/usr/local/bin/backup_databases.sh"]
              env:
                - name: DB_REGEX
                  value: {{ .Values.backupJob.dbRegex | quote }}
                - name: DAYS_TO_KEEP
                  value: "30"
                - name: PGHOST
                  value: "{{ .Values.database.postgresHost }}"
                - name: PGUSER
                  value: "{{ .Values.backupJob.postgresUser }}"
                - name: PGPASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: {{ .Values.backupJob.postgresSecret.name }}
                      key: {{ .Values.backupJob.postgresSecret.key }}
                - name: AWS_ACCESS_KEY_ID
                  valueFrom:
                    secretKeyRef:
                      name: {{ .Values.backupJob.existingSecretName }}
                      key: aws_access_key_id
                - name: AWS_SECRET_ACCESS_KEY
                  valueFrom:
                    secretKeyRef:
                      name: {{ .Values.backupJob.existingSecretName }}
                      key: aws_secret_access_key
                - name: S3_ENDPOINT
                  value: {{ .Values.backupJob.s3Endpoint }}
                - name: S3_BASEURL
                  value: {{ .Values.backupJob.s3BaseUrl }}
                - name: GPG_RECIPIENT
                  value: {{ .Values.backupJob.gpgRecipient }}
              resources:
                {{- toYaml .Values.backupJob.resources | nindent 16 }}
              volumeMounts:
              - name: home
                mountPath: /home/s3-backup
              - name: backup-public-key
                subPath: backup-public-key.asc
                mountPath: /mnt/backup-public-key.asc
                readOnly: true
          imagePullSecrets:
            - name: kivitendo-pull-secret
          volumes:
            - name: backup-public-key
              secret:
                secretName: {{ .Values.backupJob.existingSecretName }}
            - name: home
              emptyDir: {}
{{- end }}
